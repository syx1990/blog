[{"title":"djangoAPI接口的开发","url":"/2019/11/20/djangoAPI接口的开发/","content":"## 配置开发环境\n```python\npip install djangorestframework\n```\n## 在项目中添加rest_framework\n```python\nINSTALLED_APPS = ( \n    ...\n    'rest_framework',\n)\n```\n## 编写model层\n```python\nfrom django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=50)\n    price = models.DecimalField(max_digits=8,decimal_places=2\n\n    def __str__(self):\n          return self.name\n```\n## 配置数据库\n```python\npython manage.py makemigratons\npython manage.py migrate\n```\n## 编写序列化模块\n```python\nfrom rest_framework import serializers\nfrom .models import Product\n\nclass ProductSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Product\n        fields = (\"id\",\"name\",\"price\")\n```\n## 编写视图\n```python\nfrom rest_framework.views import APIView\nfrom rest_framework import generics\n\nfrom .models import Product\nfrom .serializers import ProductSerializer\n\n# 使用APIView\nclass ProductView(APIView):\n    def get(self, request, format=None):\n        product = Product.objects.all()\n        serializer = ProductSerializer(product, many=True)\n        return Response(serializer.data)\n\n    def post(self, request, format=None):\n        serializer = ProductSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        else:\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n```\n## 编写路由\n```python\nfrom django.conf.urls import  url\nfrom . import views\n\nurlpatterns = [\n    url(r'^api/$', views.ProductView.as_view(), name='product'),\n]\n```","tags":["django api开发"],"categories":["django api开发"]},{"title":"linux安装lnmp","url":"/2019/11/19/linux安装lnmp/","content":"## 安装nginx\n\n```bash\nyum install nginx\n# 开启nginx\nservice nginx start\n```\n\n## 安装MYSQL\n\n### 更新yum源\n\n```bash\nyum localinstall http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm\n\nyum install mysql-community-server\n```\n### 开启mysql\n```bash\nservice mysqld start\n```\n### 查看mysql的root账号的密码\n```bash\ngrep 'temporary password' /var/log/mysqld.log\n```\n### 登录mysql\n```bash\nmysql -uroot -p\n```\n### 修改密码\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED BY 'password';\n```\n### 修改root用户可远程登录\n```bash\n# 有问题\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;\n```\n### 刷新\n```bash\nflush privileges;\n```\n\n## mysql安全策略\n### 查看现在的密码策略：\n```bash\nshow variables like 'validate_password%';\n```\n----\nvalidate_password_number_count参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。\n\nvalidate_password_special_char_count参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。\n\nvalidate_password_mixed_case_count参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。\n\nvalidate_password_length参数是密码的长度，这个参数由下面的公式生成\n\nvalidate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)\n\nvalidate_password_dictionary_file参数是指定密码验证的字典文件路径。\n\nvalidate_password_policy这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。\n\n-----\n\n## 更改密码策略，降低密码的验证标准\n### 更改密码策略为LOW\n```bash\nset global validate_password_policy=0;\n```\n### 更改密码长度\n```bash\nset global validate_password_length=0;\n```\n### 密码最小长度为4\n```bash\nSHOW VARIABLES LIKE 'validate_password%';\n```\n## 安装php\n### 安装yum源\n```bash\nrpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\nrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n\n```\n### 查看\n```bash\nyum search php71w\n```\n### 安装php以及扩展\n```bash\nyum install php71w php71w-fpm php71w-cli php71w-common php71w-devel php71w-gd php71w-pdo php71w-mysql php71w-mbstring php71w-bcmath\n```\n### 开启服务\n```bash\nservice php-fpm start\n```\n\n","tags":["PHP","nginx","MySQL"],"categories":["PHP","nginx"]},{"title":"SSH免密登录","url":"/2019/11/17/SSH免密登录/","content":"## 什么是ssh？\nSSH 为 [Secure Shell](https://baike.baidu.com/item/Secure%20Shell) 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为 [远程登录](https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/1071998) 会话和其他网络服务提供安全性的协议。\n## 如何快速的配置ssh免密登录\n### 配置ssh分三步走\n1.  在本地创建公私钥\n```bash\nssh-keygen -t rsa #加密方式选 rsa|dsa均可以，默认dsa\n-t #The type of the key to generate 密钥的类型\n-C #comment to identify the key 用于识别这个密钥的注释 \n\n$ ssh-keygen -t rsa  #加密方式选 rsa|dsa均可以，默认dsa -t The type of the key to generate 密钥的类型 -C comment to identify the key 用于识别这个密钥的注释\nGenerating public/private rsa key pair.\nEnter file *in* which to save the key (/c/Users/Administrator/.ssh/id_rsa):\nEnter passphrase (empty *for* no passphrase):\nEnter same passphrase again:\nYour identification has been saved *in* /c/Users/Administrator/.ssh/id_rsa.\nYour public key has been saved *in* /c/Users/Administrator/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:gygJuDyfHDsL3n7HoNxXKNrjelXTKjQ1FgvXBVuoR/g geek@PC-20190414MTRE\nThe key's randomart image is:\n+---[RSA 2048]----+\n|       . o+.+o   |\n|.       o=.+o    |\n|o       o.*.     |\n|.o . . + + E     |\n|.oo.. o S +      |\n|  +.+o + +       |\n| ..*= = o        |\n|. o+o* +         |\n| ..==.+          |\n+----[SHA256]-----+\n```\n2. 用ssh-copy-id 将公钥复制或传输到远程服务器,并将身份标识文件追加到服务器的\n```bash\n$ ssh-copy-id -i ~/.ssh/yuxiangServer.pub usaename@ip\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \n\"/c/Users/Administrator/.ssh/id_rsa.pub\"\n/usr/bin/ssh-copy-id: INFO: attempting to log *in* with the new key(s), to filter \nout any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- *if* you are prompted \nnow it is to install the new keys\nyuxiangshi@119.23.78.131's password:\nNumber of key(s) added: 1\nNow try logging into the machine, with:   \"ssh 'yuxiangshi@119.23.78.131'\"\nand check to make sure that only the key(s) you wanted were added.\n```\n3. 配置本机ssh config文件\n```bash\nHost yuxiangServer\n      HostName 119.23.78.131\n      User yuxiangshi\n      Port 22\n      PubkeyAuthentication yes \n      IdentityFile ~/.ssh\n```\n* 修改服务器 /etc/ssh/sshd_config,并重启sshd服务\n```bash\nRSAAuthentication yes \nPubkeyAuthentication yes \nAuthorizedKeysFile      ~/.ssh/authorized_keys\n```\n愉快的玩耍吧。","tags":["工具 ssh"]},{"title":"php-fpm常用命令","url":"/2019/11/17/hello-world/","content":"* 查看php-fpm端口是否在被php-fpm使用\n```bash\nsudo lsof -i:9000\n```\n* 一般修改 php.ini 文件后经常需要重启php-fpm\n```bash\nsudo  killall  php-fpm   关闭\n```\n* 再输入 sudo lsof -i:9000 就会发现php-fpm没有打印对应端口\n```bash\nsudo  php-fpm    重启\n```","tags":["php-fpm"]}]